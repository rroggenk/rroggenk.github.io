---
title: "Lab 1: Quarto Warmup & STAT 331 Review"
description: "Reviewing Quarto, ggplot and dplyr & Getting to know your classmates"
author: "Rachel Roggenkemper"
date: "04-07-2025"
categories: [Quarto, R]
image: preview-image.png
format: html
embed-resources: true
editor: source
execute: 
  echo: true
  warning: false
---

```{r}
#| label: packages-setup

library(tidyverse)
library(ggridges)
```

## Quarto

First, let's make sure you know how to use Markdown formatting to style a Quarto document.

1.  **Make this text bold.**

2.  *Make this text italicized.*

3.  Make these into a bullet point list:

-   Apples

-   Bananas

-   Potatoes

4.  Edit the YAML to remove warning messages from being output in the rendered HTML file

5.  Using code chunk options, make it so this chunk shows the plot but not the source code:

```{r}
#| label: question 5
#| echo: false

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_boxplot() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )
```

6.  Using code chunk options, remove the messages about bandwidth `geom_density_ridges()` chose to use:

```{r}
#| label: question 6
#| message: false

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_density_ridges() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )
```

7.  Using code chunk options, make it so that these plots are printed side-by-side:

```{r}
#| label: question 7
#| layout-nrow: 1
ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_boxplot() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_density_ridges() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )

```

8.  Using code chunk options, make it so this chunk shows the code but not the output:

```{r}
#| label: question 8
#| output: false

2 + 2
```

9.  Using code chunk options, make it so the file can still knit even though this chunk has an error

```{r}
#| label: question 9
#| eval: false

2 + a
```

10. Using code chunk options, create a descriptive `label` for each of the code chunks above.

## Data Wrangling Review

Since you already seen some `ggplot`s, let's do a bit of review on data handling. In this class, we will exclusively make use of tools from the `tidyverse` suite of packages to perform our data cleaning and wrangling operations. If you are less familiar with these packages or it's been some time since you used them, I would strongly recommend referencing the function documentation!

For these problems, we will continue to work with the `mpg` data frame, making various changes to the data to clean it up.

11. The `fl` variable describes the type of fuel for each car, with levels: `p`, `r`, `e`, `d`, and `c`. Do some research into what each of these labels mean! Then, use the `if_else()` function to create a new variable (`fuel_type`) with two levels: `petrol` (any car using petrolium-based gas) and `alternative energy` (any car not using petrolium-based gas).

```{r}
#| label: question 11

mpg <- mpg %>%
  mutate(
    fuel_type = if_else(fl %in% c("p", "r"), 
                        "petrol", 
                        "alternative energy")
  )
```

12. The `drv` variable describes if the car has front drive (`f`), rear drive (`r`), or four wheel drive (`4`). Let's make better labels for these values! Specifically, use the `case_when()` function to change the `drv` variable to have the following levels: `front`, `rear`, `four wheel`.

```{r}
#| label: question 12

mpg <- mpg %>%
  mutate(
    drv = case_when(
      drv == "f" ~ "front",
      drv == "r" ~ "rear",
      drv == "4" ~ "four wheel"
    )
  )
```

13. The `trans` variable contains two pieces of information, (1) the transmission style (`auto` or `manual`) and the specific type of transmission (e.g., `l5`, `m5`). Using the `str_split()` function, create a new variable (`trans_type`) containing the specific type of transmission of each car. Once you've made this new variable, use the `rename()` function to change the name of the `trans` column to `trans_style`.\
    *Hint: You will need to deal with the stray parenthesis!* (string split + remove extra ")" )

```{r}
#| label: question 13

mpg <- mpg %>%
  mutate(
    # Split on "(" and take the second piece (the substring after "(")
    trans_type = str_split(trans, "\\(", simplify = TRUE)[,2],
    # Remove the trailing ")" from that substring
    trans_type = str_remove(trans_type, "\\)"),
    # Split on "(" and take the first pierce to get the transmission style
    trans = str_split(trans, "\\(", simplify = TRUE)[,1],
  ) %>%
  # Rename 'trans' column to 'trans_style'
  rename(trans_style = trans)
```

## Getting to know your classmates

14. Find someone who took Stat 331 from a different professor than you. Compare your experiences. Tell me their name and professor. List one or two things that you think you learned more about, and one or two things that they learned more about.

    Liam took Stat 331 with the queen herself, Em-Dawg. I took it with the Quarto Queen Dr. Theobold. We both had a blast, best class ever. I had it on Zoom, so I probably learned more about learning on Zoom. I learned more about data wrangling, because I wrangled that data. Liam learned that a lot about tidyverse. Samesies. Live, laugh, love tidyverse. Liam learned more about which color pallette are color vision deficient friendly.

15. Find someone in the class who **does not** share your birth month. Tell me their name and birthday, and use R to find out how many days apart your birthdays are.

Lily "the GOAT" Cook, birthday is July 11, 2002 (7-eleven)

```{r}
#| label: question 15

start_date <- as.Date("2002-07-11")
end_date   <- as.Date("2002-08-14")
num_days <- end_date - start_date
num_days
```
